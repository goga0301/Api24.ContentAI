import os
import subprocess
import tempfile
from config import logger


def convert_pdf_to_images(pdf_path: str) -> list[str]:
    output_dir = os.path.join(tempfile.gettempdir(), "ocr_pages")
    os.makedirs(output_dir, exist_ok=True)
    output_prefix = os.path.join(output_dir, "page")

    if not os.path.exists(pdf_path):
        raise RuntimeError(f"PDF does not exist: {pdf_path}")
    if os.path.getsize(pdf_path) == 0:
        raise RuntimeError(f"PDF is empty: {pdf_path}")
    with open(pdf_path, "rb") as f:
        if f.read(5) != b"%PDF-":
            raise RuntimeError("Invalid PDF file")

    pdftoppm_cmd = "pdftoppm"  # assume it's in PATH on both platforms

    cmd = [pdftoppm_cmd, pdf_path, output_prefix, "-png"]
    try:
        logger.debug(f"Running: {' '.join(cmd)}")
        subprocess.run(cmd, check=True, capture_output=True, text=True)
    except subprocess.CalledProcessError as e:
        logger.error(f"pdftoppm failed: {e.stderr}")
        raise RuntimeError(f"pdftoppm error: {e.stderr}")

    images = sorted(
        os.path.join(output_dir, f)
        for f in os.listdir(output_dir)
        if f.startswith("page") and f.endswith(".png")
    )
    if not images:
        raise RuntimeError("No images generated by pdftoppm")
    return images


def convert_markdown_to_pdf_content(
    markdown_bytes: bytes, filename_hint: str = "upload.md"
) -> str:
    if not filename_hint.endswith(".md"):
        raise RuntimeError("File must be a Markdown (.md) file.")

    with tempfile.NamedTemporaryFile(delete=False, suffix=".md") as tmp_md:
        tmp_md.write(markdown_bytes)
        tmp_md_path = tmp_md.name

    output_pdf_path = tempfile.mktemp(suffix=".pdf")
    cmd = [
        "pandoc",
        tmp_md_path,
        "-f",
        "markdown+emoji+smart+pipe_tables+raw_html+tex_math_dollars+task_lists+multiline_tables",
        "-o",
        output_pdf_path,
        "--pdf-engine=xelatex",
        "--toc",  # Optional: table of contents
        "--pdf-engine-opt=-shell-escape",  # Needed for some LaTeX tricks
    ]

    try:
        logger.debug(f"Running: {' '.join(cmd)}")
        subprocess.run(cmd, check=True, capture_output=True, text=True)
    except subprocess.CalledProcessError as e:
        logger.error(f"Pandoc failed: {e.stderr}")
        raise RuntimeError(f"Pandoc conversion failed: {e.stderr}")

    if not os.path.exists(output_pdf_path) or os.path.getsize(output_pdf_path) == 0:
        raise RuntimeError("Pandoc did not generate a valid PDF")

    return output_pdf_path
